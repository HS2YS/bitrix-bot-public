require('dotenv').config({ path: 'keys.env' });

const express = require('express');
const axios = require('axios');
const app = express();

app.use(express.urlencoded({ extended: true }));

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–∑ keys.env)
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID_PROJECT_1 = process.env.TELEGRAM_CHAT_ID_PROJECT_1;
const TELEGRAM_CHAT_ID_PROJECT_2 = process.env.TELEGRAM_CHAT_ID_PROJECT_2;
const TELEGRAM_CHAT_ID_DEFAULT = process.env.TELEGRAM_CHAT_ID_DEFAULT;
const BITRIX_API_URL = process.env.BITRIX_API_URL;
const PORT = process.env.PORT || 3333;

async function sendMessageToTelegram(chatId, message) {
  try {
    const response = await axios.post(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      }
    );
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ /telegram_webhook
app.post('/telegram_webhook', async (req, res) => {
  const { body } = req;
  const taskId = body.document_id[2]; 
  const taskUrl = `<—à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏>${taskId}/`; // –í –∫–æ–Ω—Ü–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –∑–∞–¥–∞—á–∏, —É–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ

  console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24:', body);

  try {
    const apiResponse = await axios.get(`${BITRIX_API_URL}?TASKID=${taskId}`);
    const taskData = apiResponse.data.result || {};

    const tags = taskData.TAGS || [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–≥–∞ –≤  –∑–∞–¥–∞—á–µ
    let targetChatId = TELEGRAM_CHAT_ID_DEFAULT;
    if (tags.includes('–ü—Ä–æ–µ–∫—Ç1')) {
      targetChatId = TELEGRAM_CHAT_ID_PROJECT_1;
    } else if (tags.includes('–ü—Ä–æ–µ–∫—Ç2')) {
      targetChatId = TELEGRAM_CHAT_ID_PROJECT_2;
    }

    const status = taskData.STATUS; 
    const title = taskData.TITLE;
    const createdDateStr = taskData.CREATED_DATE;

    const createdDate = new Date(createdDateStr);
    const now = new Date();
    const diffMs = now - createdDate;

    // –ü–æ—Ä–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ = 1 –º–∏–Ω—É—Ç–∞
    const NEW_TASK_THRESHOLD_MS = 1 * 60 * 1000;

    // –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ 2 –∏–ª–∏ -2 (–∂–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    let firstLine = '';
    if (status === '2' || status === '-2') {
      if (diffMs >= 0 && diffMs <= NEW_TASK_THRESHOLD_MS) {
        firstLine = '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! üÜï';
      } else {
        firstLine = '–ó–∞–¥–∞—á–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ —Ä–∞–±–æ—Ç—É üîÑ';
      }
    } else if (status === '4') {
      firstLine = '–ó–∞–¥–∞—á–∞ –∂–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è ‚è≥';
    } else if (status === '5') {
      firstLine = '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ';
    } else {
      firstLine = `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: ${status}`;
    }

    const secondLine = `ID –∑–∞–¥–∞—á–∏: ${taskId}`;
    const thirdLine = `–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${title}`;
    const fourthLine = `<a href="${taskUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É</a>`;

    const message = [firstLine, secondLine, thirdLine, fourthLine].join('\n');

    await sendMessageToTelegram(targetChatId, message);

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix24:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
